1. Summarize for us the goal of this project and how machine learning is useful in trying to accomplish it. As part of your answer, give some background on the dataset and how it can be used to answer the project question. Were there any outliers in the data when you got it, and how did you handle those?  [relevant rubric items: “data exploration”, “outlier investigation”]

The goal of this project is to determine whether one can use machine learning to reliably identify persons-of-interest (POI's) in the Enron dataset, using available features of that same dataset.  Machine learning is useful in this case because it can objectively and consistently evaluate the significance of a fairly large number of features over a large dataset, which would be very difficult and time-consuming to do manually.  It also offers many built-in tools (like PCA) and evaluation metrics that make it quick and easy to evaluate and modify the algorithms on-the-fly in order to optimize performance.

Below are some summary statistics of the people contained within the dataset; there were two clear outliers that did not represent people, so those were removed ("THE TRAVEL AGENCY IN THE PARK" and "TOTAL").  I chose to leave in all other data points due to the already very sparse nature of the dataset.  Many people were missing salary or email data, but I chose to move ahead anyway, under the assumption that there would still be enough data for machine learning to extract useful trends.

total people:  146
people with salary + email data:  67
people with only salary data:  28
people with only email data:  19
people with neither:  32
total people after cleaning outliers:  144


2. What features did you end up using in your POI identifier, and what selection process did you use to pick them? Did you have to do any scaling? Why or why not? As part of the assignment, you should attempt to engineer your own feature that does not come ready-made in the dataset -- explain what feature you tried to make, and the rationale behind it. (You do not necessarily have to use it in the final analysis, only engineer and test it.) In your feature selection step, if you used an algorithm like a decision tree, please also give the feature importances of the features that you use, and if you used an automated feature selection function like SelectKBest, please report the feature scores and reasons for your choice of parameter values.  [relevant rubric items: “create new features”, “properly scale features”, “intelligently select feature”]

My feature list was as follows:  ['poi', 'salary', 'to_messages', 'deferral_payments', \
                 'total_payments', 'exercised_stock_options', 'bonus', \
                 'restricted_stock', 'shared_receipt_with_poi', \
                 'restricted_stock_deferred', 'total_stock_value', \
                 'expenses', 'loan_advances', 'from_messages', 'other', \
                 'from_this_person_to_poi', 'director_fees', \
                 'deferred_income', 'long_term_incentive', \
                 'from_poi_to_this_person', 'scaled_salary_bonus_stock'].
This is the full list of features - in my initial submission, I tried to reduce the number of features using my intuition, and then by using SelectKBest, but I found that reducing the number of features reduced my accuracy, F1, recall, and precision scores.  Therefore I went back to using the entire dataset.  This is not optimal from a performance standpoint, but was necessary to achieve precision and recall of 0.3.  I created the "scaled_salary_bonus_stock" feature by combining the scaled versions of those 3 features - I chose those 3 features because they had 3 of the top scores from SelectKBest.  Otherwise, I did not scale any other features, but had to for "scaled_salary_bonus_stock" because I was combining features of very different magnitudes and ranges.  FYI, these are the top scoring features when I used SelectKBest with the 'f_classif' methodology:
-salary   18.29
-excercised_stock_options  24.82
-bonus  20.79
-total stock value  24.18
-deferred_income  11.46
-scaled_salary_bonus_stock  9.92

3. What algorithm did you end up using? What other one(s) did you try? How did model performance differ between algorithms?  [relevant rubric item: “pick an algorithm”]

I ultimately arrived at Adaboost, tuned with GridSearchCV.  RandomForest did not produce the precision and recall scores required, despite exhaustively tuning its parameters with GridSearchCV.  I also tried SVC and GaussianNB, but they produced much lower scores.


4. What does it mean to tune the parameters of an algorithm, and what can happen if you don’t do this well?  How did you tune the parameters of your particular algorithm? (Some algorithms do not have parameters that you need to tune -- if this is the case for the one you picked, identify and briefly explain how you would have done it for the model that was not your final choice or a different model that does utilize parameter tuning, e.g. a decision tree classifier).  [relevant rubric item: “tune the algorithm”]

Many algorithms require input parameters that serve as underlying assumptions during execution.  For instance, the number of principle components you want the PCA algorithm to produce, or the penalty factor you would like the SVC algorithm to use.  These cannot be automatically detected or predicted by the algorithm, since they really reflect the desires and purpose of the human user.  Using them incorrectly will still allow the algorithms to run, but may produce suboptimal results with regards to speed, accuracy, precision, recall, efficiency, etc.

I tuned my parameters automatically by using the GridSearchCV function.  This produced the following:
AdaBoostClassifier(algorithm='SAMME.R', base_estimator=None,
          learning_rate=0.5, n_estimators=100, random_state=None)


5. What is validation, and what’s a classic mistake you can make if you do it wrong? How did you validate your analysis?  [relevant rubric item: “validation strategy”]

Validating is the process of confirming that the algorithms are producing the desired results and delivering an acceptable, and hopefully optimized, level of performance.  A classic mistake would be to prioritize accuracy (or an F1 score) over all other evaluation metrics, potentially leading one to accidentally accept much more negative consequences in the name of greater accuracy.  For instance, if an algorithm is being used in an application that could potentially lead to loss of life (such as self-driving cars), accuracy might be intentionally sacrificed in order to prioritize recall or precision scores.


6. Give at least 2 evaluation metrics and your average performance for each of them.  Explain an interpretation of your metrics that says something human-understandable about your algorithm’s performance. [relevant rubric item: “usage of evaluation metrics”]

I used precision and recall, and here is a sample classification report:
             precision    recall  f1-score   support

        0.0       0.92      0.95      0.94        38
        1.0       0.50      0.40      0.44         5

avg / total       0.87      0.88      0.88        43

In common terms, precision indicates how often the algorithm is correct when it "accuses" someone of being a POI.  Recall indicates how many true POI's the algorithm "accuses."  From the above example table, the algorithm is correct 50% of the time when it indicates a POI, and it catches 40% of the POI's.  There is usually a trade-off between these 2 metrics:  as you increase the algorithm's bias for making accusations, it will catch more POI's, but will be incorrect in more accusations.  It is sometimes possible to improve both scores simultaneously, but this would require a better algorithm, better parameter tuning, more data, more features, etc.


